{"version":3,"sources":["components/dashboard/Dashboard.jsx","components/App.jsx","index.jsx"],"names":["Dashboard","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","inputText","tasks","students","studentLinks","taskLinks","info","selectedOption","updateInfo","bind","assertThisInitialized","handleSelect","getOptions","localStorage","getItem","setState","JSON","parse","value","setItem","stringify","data","options","forEach","elem","push","mentorGit","optionsFiltered","indexOf","map","label","filteredData","filter","student","rowsLinks","rows","cells","cols","colsLinks","length","studentGit","studentGitLink","task","taskLink","taskName","unshift","console","log","_this$state","react_default","a","createElement","className","react_select_esm","onChange","index","key","href","target","rel","taskIndex","concat","counter","start","element","status","cell","cellIndex","score","Component","defaultProps","App","dashboard_Dashboard","ReactDOM","render","components_App","document","getElementById"],"mappings":"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","file":"static/js/main.e1cf7980.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport Select from 'react-select';\n\nimport './dashboard.css';\n\nclass Dashboard extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      inputText: '',\n      tasks: [],\n      students: [],\n      studentLinks: [],\n      taskLinks: [],\n      info: [],\n      selectedOption: '',\n    };\n    this.updateInfo = this.updateInfo.bind(this);\n    this.handleSelect = this.handleSelect.bind(this);\n    this.getOptions = this.getOptions.bind(this);\n  }\n\n  componentWillMount() {\n    if (localStorage.getItem('rssdashboard') !== null) {\n      this.setState(JSON.parse(localStorage.getItem('rssdashboard')));\n    }\n  }\n\n  componentDidMount() {\n    const { selectedOption } = this.state;\n    this.updateInfo(selectedOption.value);\n  }\n\n  componentDidUpdate() {\n    localStorage.setItem('rssdashboard', JSON.stringify(this.state));\n  }\n\n  getOptions() {\n    const { data } = this.props;\n    const options = [];\n    data.forEach((elem) => {\n      options.push(elem.mentorGit);\n    });\n    const optionsFiltered = [];\n    options.forEach((elem) => {\n      if (optionsFiltered.indexOf(elem) === -1) {\n        optionsFiltered.push(elem);\n      }\n    });\n    const finalOptions = optionsFiltered.map(elem => ({\n      value: elem,\n      label: elem,\n    }));\n    return finalOptions;\n  }\n\n  updateInfo(value) {\n    const { data } = this.props;\n    const filteredData = data\n      .filter(student => student.mentorGit === value);\n    const rowsLinks = [];\n    const rows = [];\n    const cells = [];\n    const cols = [];\n    const colsLinks = [];\n    if (filteredData.length) {\n      filteredData.forEach((student) => {\n        cells.push(student.tasks);\n        rows.push(student.studentGit);\n        rowsLinks.push(student.studentGitLink);\n      });\n      filteredData[0].tasks.forEach((task) => {\n        colsLinks.push(task.taskLink);\n        cols.push(task.taskName);\n      });\n      rows.unshift('');\n      rowsLinks.unshift('');\n    }\n\n    this.setState({\n      inputText: value,\n      students: rows,\n      info: cells,\n      tasks: cols,\n      taskLinks: colsLinks,\n      studentLinks: rowsLinks,\n    });\n  }\n\n  handleSelect(selectedOption) {\n    this.setState({ selectedOption });\n    console.log('Option selected:', selectedOption);\n    this.updateInfo(selectedOption.value);\n  }\n\n  render() {\n    const {\n      tasks, students, info, taskLinks, studentLinks, selectedOption,\n    } = this.state;\n    return (\n      <div className=\"container\">\n        <h1>\n          Mentor:\n          <Select className=\"select-bar\" value={selectedOption} onChange={this.handleSelect} options={this.getOptions()} />\n        </h1>\n        <table>\n          <thead>\n            <tr>\n              {students.map((student, index) => (\n                <th key={student}><a href={studentLinks[index]} target=\"_blank\" rel=\"noopener noreferrer\">{student}</a></th>\n              ))}\n            </tr>\n          </thead>\n          <tbody>\n            {tasks.map((task, taskIndex) => (\n              <tr key={`${task} row`}>\n                <td\n                  key={task}\n                  className={\n                  // получение класса левого столбца исходя из статуса задачи по всем студентам\n                  (function getClass(counter) {\n                    let start = counter;\n                    const target = info.length;\n                    info.forEach((element) => {\n                      if (element[taskIndex].status === 'done') {\n                        start += 1;\n                      }\n                    });\n                    if (target === start) {\n                      return 'done';\n                    }\n                    return 'default';\n                  }(0))\n                }\n                >\n                  <a href={taskLinks[taskIndex]} target=\"_blank\" rel=\"noopener noreferrer\">{task}</a>\n                </td>\n                {info.map((cell, cellIndex) => <td key={`${taskIndex + 1}+${cellIndex + 1}`} className={cell[taskIndex].status}>{cell[taskIndex].score}</td>)}\n              </tr>\n            ))}\n          </tbody>\n        </table>\n      </div>\n    );\n  }\n}\n\nDashboard.propTypes = {\n  data: PropTypes.arrayOf(PropTypes.object),\n};\n\nDashboard.defaultProps = {\n  data: [],\n};\n\nexport default Dashboard;\n","import React from 'react';\nimport data from '../data/data.json';\nimport Dashboard from './dashboard/Dashboard';\n\nconst App = () => (\n  <Dashboard data={data} />\n);\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './components/App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}
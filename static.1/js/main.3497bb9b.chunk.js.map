{"version":3,"sources":["components/dashboard/Dashboard.jsx","components/App.jsx","index.jsx"],"names":["Dashboard","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","inputText","tasks","students","studentLinks","taskLinks","info","handleInputChange","bind","assertThisInitialized","updateInfo","localStorage","getItem","setState","JSON","parse","setItem","stringify","value","filteredData","data","filter","student","mentorGit","rowsLinks","rows","cells","cols","colsLinks","length","forEach","push","studentGit","studentGitLink","task","taskLink","taskName","unshift","_ref","target","toLowerCase","_this$state","react_default","a","createElement","className","type","name","onChange","map","index","key","href","rel","taskIndex","concat","counter","start","element","status","cell","cellIndex","score","Component","defaultProps","App","dashboard_Dashboard","ReactDOM","render","components_App","document","getElementById"],"mappings":"8OAKMA,qBACJ,SAAAA,EAAYC,GAAO,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAL,IACjBE,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAH,GAAAQ,KAAAH,KAAMJ,KACDQ,MAAQ,CACXC,UAAW,GACXC,MAAO,GACPC,SAAU,GACVC,aAAc,GACdC,UAAW,GACXC,KAAM,IAERb,EAAKc,kBAAoBd,EAAKc,kBAAkBC,KAAvBd,OAAAe,EAAA,EAAAf,QAAAe,EAAA,EAAAf,CAAAD,KACzBA,EAAKiB,WAAajB,EAAKiB,WAAWF,KAAhBd,OAAAe,EAAA,EAAAf,QAAAe,EAAA,EAAAf,CAAAD,KAXDA,oFAe4B,OAAzCkB,aAAaC,QAAQ,iBACvBhB,KAAKiB,SAASC,KAAKC,MAAMJ,aAAaC,QAAQ,8DAI9B,IACVX,EAAcL,KAAKI,MAAnBC,UACRL,KAAKc,WAAWT,gDAIhBU,aAAaK,QAAQ,eAAgBF,KAAKG,UAAUrB,KAAKI,2CAGhDkB,GAAO,IAEVC,EADWvB,KAAKJ,MAAd4B,KAELC,OAAO,SAAAC,GAAO,OAAIA,EAAQC,YAAcL,IACrCM,EAAY,GACZC,EAAO,GACPC,EAAQ,GACRC,EAAO,GACPC,EAAY,GACdT,EAAaU,SACfV,EAAaW,QAAQ,SAACR,GACpBI,EAAMK,KAAKT,EAAQpB,OACnBuB,EAAKM,KAAKT,EAAQU,YAClBR,EAAUO,KAAKT,EAAQW,kBAEzBd,EAAa,GAAGjB,MAAM4B,QAAQ,SAACI,GAC7BN,EAAUG,KAAKG,EAAKC,UACpBR,EAAKI,KAAKG,EAAKE,YAEjBX,EAAKY,QAAQ,IACbb,EAAUa,QAAQ,KAGpBzC,KAAKiB,SAAS,CACZZ,UAAWiB,EACXf,SAAUsB,EACVnB,KAAMoB,EACNxB,MAAOyB,EACPtB,UAAWuB,EACXxB,aAAcoB,iDAIuB,IAAXN,EAAWoB,EAArBC,OAAUrB,MAC5BtB,KAAKc,WAAWQ,EAAMsB,gDAGf,IAAAC,EAGH7C,KAAKI,MADPC,EAFKwC,EAELxC,UAAWC,EAFNuC,EAEMvC,MAAOC,EAFbsC,EAEatC,SAAUG,EAFvBmC,EAEuBnC,KAAMD,EAF7BoC,EAE6BpC,UAAWD,EAFxCqC,EAEwCrC,aAE/C,OACEsC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,aACbH,EAAAC,EAAAC,cAAA,oBAEEF,EAAAC,EAAAC,cAAA,SAAOE,KAAK,OAAOC,KAAK,OAAO7B,MAAOjB,EAAW+C,SAAUpD,KAAKW,qBAElEmC,EAAAC,EAAAC,cAAA,aACEF,EAAAC,EAAAC,cAAA,aACEF,EAAAC,EAAAC,cAAA,UACGzC,EAAS8C,IAAI,SAAC3B,EAAS4B,GAAV,OACZR,EAAAC,EAAAC,cAAA,MAAIO,IAAK7B,GAASoB,EAAAC,EAAAC,cAAA,KAAGQ,KAAMhD,EAAa8C,GAAQX,OAAO,SAASc,IAAI,uBAAuB/B,QAIjGoB,EAAAC,EAAAC,cAAA,aACG1C,EAAM+C,IAAI,SAACf,EAAMoB,GAAP,OACTZ,EAAAC,EAAAC,cAAA,MAAIO,IAAG,GAAAI,OAAKrB,EAAL,SACLQ,EAAAC,EAAAC,cAAA,MACEO,IAAKjB,EACLW,UAEC,SAAkBW,GACjB,IAAIC,EAAQD,EACNjB,EAASjC,EAAKuB,OAMpB,OALAvB,EAAKwB,QAAQ,SAAC4B,GACsB,SAA9BA,EAAQJ,GAAWK,SACrBF,GAAS,KAGTlB,IAAWkB,EACN,OAEF,UAXR,CAYC,IAGFf,EAAAC,EAAAC,cAAA,KAAGQ,KAAM/C,EAAUiD,GAAYf,OAAO,SAASc,IAAI,uBAAuBnB,IAE3E5B,EAAK2C,IAAI,SAACW,EAAMC,GAAP,OAAqBnB,EAAAC,EAAAC,cAAA,MAAIO,IAAG,GAAAI,OAAKD,EAAY,EAAjB,KAAAC,OAAsBM,EAAY,GAAKhB,UAAWe,EAAKN,GAAWK,QAASC,EAAKN,GAAWQ,sBA7GzHC,cA2HxBxE,EAAUyE,aAAe,CACvB5C,KAAM,IAGO7B,QC5HA0E,EAJH,kBACVvB,EAAAC,EAAAC,cAACsB,EAAD,CAAW9C,KAAMA,KCDnB+C,IAASC,OAAO1B,EAAAC,EAAAC,cAACyB,EAAD,MAASC,SAASC,eAAe","file":"static/js/main.3497bb9b.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\n\nimport './dashboard.css';\n\nclass Dashboard extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      inputText: '',\n      tasks: [],\n      students: [],\n      studentLinks: [],\n      taskLinks: [],\n      info: [],\n    };\n    this.handleInputChange = this.handleInputChange.bind(this);\n    this.updateInfo = this.updateInfo.bind(this);\n  }\n\n  componentWillMount() {\n    if (localStorage.getItem('rssdashboard') !== null) {\n      this.setState(JSON.parse(localStorage.getItem('rssdashboard')));\n    }\n  }\n\n  componentDidMount() {\n    const { inputText } = this.state;\n    this.updateInfo(inputText);\n  }\n\n  componentDidUpdate() {\n    localStorage.setItem('rssdashboard', JSON.stringify(this.state));\n  }\n\n  updateInfo(value) {\n    const { data } = this.props;\n    const filteredData = data\n      .filter(student => student.mentorGit === value);\n    const rowsLinks = [];\n    const rows = [];\n    const cells = [];\n    const cols = [];\n    const colsLinks = [];\n    if (filteredData.length) {\n      filteredData.forEach((student) => {\n        cells.push(student.tasks);\n        rows.push(student.studentGit);\n        rowsLinks.push(student.studentGitLink);\n      });\n      filteredData[0].tasks.forEach((task) => {\n        colsLinks.push(task.taskLink);\n        cols.push(task.taskName);\n      });\n      rows.unshift('');\n      rowsLinks.unshift('');\n    }\n\n    this.setState({\n      inputText: value,\n      students: rows,\n      info: cells,\n      tasks: cols,\n      taskLinks: colsLinks,\n      studentLinks: rowsLinks,\n    });\n  }\n\n  handleInputChange({ target: { value } }) {\n    this.updateInfo(value.toLowerCase());\n  }\n\n  render() {\n    const {\n      inputText, tasks, students, info, taskLinks, studentLinks,\n    } = this.state;\n    return (\n      <div className=\"container\">\n        <h1>\n          Mentor:\n          <input type=\"text\" name=\"name\" value={inputText} onChange={this.handleInputChange} />\n        </h1>\n        <table>\n          <thead>\n            <tr>\n              {students.map((student, index) => (\n                <th key={student}><a href={studentLinks[index]} target=\"_blank\" rel=\"noopener noreferrer\">{student}</a></th>\n              ))}\n            </tr>\n          </thead>\n          <tbody>\n            {tasks.map((task, taskIndex) => (\n              <tr key={`${task} row`}>\n                <td\n                  key={task}\n                  className={\n                  // получение класса левого столбца исходя из статуса задачи по всем студентам\n                  (function getClass(counter) {\n                    let start = counter;\n                    const target = info.length;\n                    info.forEach((element) => {\n                      if (element[taskIndex].status === 'done') {\n                        start += 1;\n                      }\n                    });\n                    if (target === start) {\n                      return 'done';\n                    }\n                    return 'default';\n                  }(0))\n                }\n                >\n                  <a href={taskLinks[taskIndex]} target=\"_blank\" rel=\"noopener noreferrer\">{task}</a>\n                </td>\n                {info.map((cell, cellIndex) => <td key={`${taskIndex + 1}+${cellIndex + 1}`} className={cell[taskIndex].status}>{cell[taskIndex].score}</td>)}\n              </tr>\n            ))}\n          </tbody>\n        </table>\n      </div>\n    );\n  }\n}\n\nDashboard.propTypes = {\n  data: PropTypes.arrayOf(PropTypes.object),\n};\n\nDashboard.defaultProps = {\n  data: [],\n};\n\nexport default Dashboard;\n","import React from 'react';\nimport data from '../data/data.json';\nimport Dashboard from './dashboard/Dashboard';\n\nconst App = () => (\n  <Dashboard data={data} />\n);\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './components/App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}